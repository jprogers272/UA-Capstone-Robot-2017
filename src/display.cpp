#include "display.hpp"
#include "i2cbus.hpp"
#include <math.h>
#include "glcdfont.hpp"
#include <string>
#include <string.h>
#include <iostream>

using namespace std;

static unsigned char displayBuf_[HEIGHT*WIDTH] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
    0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
    0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
    0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
    0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
    0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
    0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
    0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
    0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
    0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
    0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
    0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
    0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


Display::Display(I2Cbus* i2c_bus) {
  dispi2c_ = i2c_bus;
  dispi2c_->setDevice(DISP_ADDRESS);
  tmpBuf_ = new unsigned char[TILE_SIZE];
  dataBuf_ = new unsigned char [TILE_SIZE];
  for(int i = 0; i < TILE_SIZE; i++ ) tmpBuf_[i] = dataBuf_[i] = 0;
  init();
}

Display::~Display() {
  delete [] tmpBuf_;
  delete [] dataBuf_;
}

void Display::clearBuffer() {
  memset(displayBuf_, 0, WIDTH*HEIGHT);
}

void Display::clearDisplay() {
  clearBuffer();
  writeDisplay();
}

void Display::writeDisplay() {
  dispi2c_->writeRegister(0x00, 0x21); // Set column start addr
  dispi2c_->writeRegister(0x00, 0x00); // 0x00
  dispi2c_->writeRegister(0x00, 127);  // Set column end addr, end 127
  dispi2c_->writeRegister(0x00, 0x22);  // Set page addr
  dispi2c_->writeRegister(0x00, 0x00); // Page start address
  dispi2c_->writeRegister(0x00, 0x07); // Command for 7

  
  for(unsigned short i = 0; i < WIDTH*HEIGHT; i++) {
    dispi2c_->writeRegister(0x40, displayBuf_[i]);
  }
}

void Display::writeCenter(string txt, unsigned char row) {
  if((txt.length()*6)<127)
    writeText(txt, row, (128 - ((txt.length()*6)-1))/2);
  else
    writeText(txt,row,0);
}

void Display::writeText(string txt, unsigned char row, unsigned char col) {
  unsigned char uchI, uchJ;
  unsigned short uiIndex;

  uiIndex = (row * WIDTH) + col;

  if((row >= HEIGHT) || (col >= WIDTH)) 
    return;

  for(uchI = 0; uchI < txt.length(); uchI++) {
    for(uchJ = 0; uchJ < 5; uchJ++) {
      displayBuf_[uiIndex] = font[(txt[uchI]*5)+uchJ];
      uiIndex++;
    }
    displayBuf_[uiIndex] = 0x00;
    uiIndex++;
  }
}

void Display::init() {
  dispi2c_->writeRegister(0x00,0xAE); // Display Off = 0xAE
  dispi2c_->writeRegister(0x00,0xD5); // ClockDiv = 0xD5
  dispi2c_->writeRegister(0x00,0x80); // Ratio 0x80

  dispi2c_->writeRegister(0x00,0xA8); //Multiplex 0xA8
  dispi2c_->writeRegister(0x00,0x3F); // LCDHeight = 40 - 1 = 3F

  dispi2c_->writeRegister(0x00,0xD3); //0xD3 Offest
  dispi2c_->writeRegister(0x00,0x0); // no offset
  dispi2c_->writeRegister(0x00,0x40|0x0); // line #0
  dispi2c_->writeRegister(0x00,0x8D); // ChargePUMP 0x8D
  dispi2c_->writeRegister(0x00,0x14); // 0x14

  dispi2c_->writeRegister(0x00,0x20); // memory mode 0x20
  dispi2c_->writeRegister(0x00,0x0);  // 0x0
  dispi2c_->writeRegister(0x00,0xA0 | 0x1); // Segremap | 1
  dispi2c_->writeRegister(0x00,0xC8); // ComScanDec
 
  dispi2c_->writeRegister(0x00,0xDA); // Set CompIns
  dispi2c_->writeRegister(0x00,0x12); // 0x12
  dispi2c_->writeRegister(0x00,0x81); // Contrast 0x81
  dispi2c_->writeRegister(0x00,0xCF); // 0xCF

  dispi2c_->writeRegister(0x00,0xD9); // Precharge
  dispi2c_->writeRegister(0x00,0xF1); // 0xF1
  dispi2c_->writeRegister(0x00,0xDB); // 0xDB
  dispi2c_->writeRegister(0x00,0x40); //0x40
  dispi2c_->writeRegister(0x00,0xA4); //0xA4
  dispi2c_->writeRegister(0x00,0xA6); // 0xA6
  dispi2c_->writeRegister(0x00,0x2E); // 0x2E
  dispi2c_->writeRegister(0x00,0xAF); // 0xAF
}

void Display::writeImage (unsigned char* image) { 
  for (int lcv=0; lcv<(WIDTH * HEIGHT); lcv++) {
    getTileFromBitmap(lcv);
    // rotate the 8x8 tile
    rotateTile();
    for(int i = 0; i < TILE_SIZE; i++) {
      tmpBuf_[i] = reverseByte(tmpBuf_[i]);
    }
    setTileInBuffer(lcv);
  }
}

unsigned char Display::reverseByte(unsigned char b) {
  b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  return b;
}

void Display::getTileFromBitmap(int index) {
  int step = 0;
  for(int i = 0; i < TILE_SIZE; i++, step+= STEP_SIZE) {
    dataBuf_[i] = displayBuf_[index+step];
  }
}

void Display::setTileInBuffer(int index) {
  int step = 0;
  for(int i = 0; i < TILE_SIZE; i++, step+= STEP_SIZE) {
    displayBuf_[index+step] |=tmpBuf_[i];
  }
}

void Display::rotateTile()
{
   // process bits for a bytes in data
   for (int i=0; i<TILE_SIZE; i++)
   {
      // process data bytes
      for (int j=0; j<TILE_SIZE; j++)
      {
         unsigned char temp = dataBuf_[j] & (unsigned char)pow(2, 7-i);
         int shift = 7-i-j;
         unsigned char shifted = 0x0;
         if (shift < 0)
         {
            shift *= -1;
            shifted = temp << shift;
         }
         else
         {
            shifted = temp >> shift;
         }
         tmpBuf_[i] |= shifted;
      }
      tmpBuf_[i] = reverseByte(tmpBuf_[i]);
   }
}





